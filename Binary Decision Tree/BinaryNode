/**
 * Blueprint class to create generic BinaryNode Objects.
 * 
 * @param <T> generic type.
 * 
 * @author Jacob Strokus
 *
 */
public class BinaryNode<T> {

	/**
	 * T value representing the data in a node.
	 */
	protected T data;

	/**
	 * Reference to the left child node in the tree.
	 */
	protected BinaryNode<T> leftChild;

	/**
	 * Reference to the right child node in the tree.
	 */
	protected BinaryNode<T> rightChild;

	/**
	 * Reference to the root node in the tree.
	 */
	protected BinaryNode<T> root;

	/**
	 * Private integer representing the number of nodes in the tree.
	 */
	private int numNodes = 0;

	/**
	 * Default constructor.
	 */
	public BinaryNode() {

	}

	/**
	 * Constructor to create binary nodes with parameter data.
	 * 
	 * @param data T value representing the data to be put into a new node.
	 */
	public BinaryNode(T data) {

		this.data = data;
	}

	/**
	 * Full constructor to create binary.
	 * 
	 * @param data       T value representing the data to be put into a new node.
	 * @param leftChild  Reference to the left child node.
	 * @param rightChild Reference to the right child node.
	 */
	public BinaryNode(T data, BinaryNode<T> leftChild, BinaryNode<T> rightChild) {

		this.data = data;
		this.leftChild = leftChild;
		this.rightChild = rightChild;
	}

	/**
	 * Method to get the data in a node.
	 * 
	 * @return the data
	 */
	public T getData() {
		return data;
	}

	/**
	 * Method to set the data in a node.
	 * 
	 * @param data the data to set
	 */
	public void setData(T data) {
		this.data = data;
	}

	/**
	 * Method to get the left child node.
	 * 
	 * @return the leftChild
	 */
	public BinaryNode<T> getLeftChild() {
		return leftChild;
	}

	/**
	 * Method to set the left child node.
	 * 
	 * @param leftChild the leftChild to set
	 */
	public void setLeftChild(BinaryNode<T> leftChild) {
		this.leftChild = leftChild;
	}

	/**
	 * Method to get the right child node.
	 * 
	 * @return the rightChild
	 */
	public BinaryNode<T> getRightChild() {
		return rightChild;
	}

	/**
	 * Method to set the right child node.
	 * 
	 * @param rightChild the rightChild to set
	 */
	public void setRightChild(BinaryNode<T> rightChild) {
		this.rightChild = rightChild;
	}

	/**
	 * Method to check whether a node is a leaf.
	 * 
	 * @return boolean expression if node is a leaf.
	 */
	public boolean isLeaf() {

		if (this.rightChild == null && this.leftChild == null) {
			return true;
		}
		return false;
	}

	/**
	 * Method to get the height of the tree.
	 * 
	 * @return the height of a tree rooted at the node.
	 */
	public int getHeight() {

		int height = -1;

		if (root == null || root.isLeaf()) {

		} else {
			setRoot(root.leftChild);
			int left = getHeight();
			setRoot(root.rightChild);
			int right = getHeight();

			if (left > right)
				height = left + 1;
			else
				height = right + 1;
		}

		return height;
	}

	/**
	 * Method to get the number of nodes in a tree.
	 * 
	 * @return Integer representing the total nodes.
	 */
	public int getNumberOfNodes() {

		if (root == null) {
			return numNodes;
		} else {

			numNodes++;
			
			root = root.getLeftChild();
			
			if (root != null) {
				numNodes++;
				getNumberOfNodes();
			}
			
			root = root.getRightChild();
			
			if (root != null) {
				numNodes++;
				getNumberOfNodes();
			}

		}
		return numNodes;
	}

	/**
	 * Method to copy the tree.
	 * 
	 * @return new node with copied information from original.
	 */
	public BinaryNode<T> copy() {

		BinaryNode<T> left = null;
		BinaryNode<T> right = null;
		if (this.leftChild != null) {
			left = this.leftChild.copy();
		}
		if (this.rightChild != null) {
			right = this.rightChild.copy();
		}
		return new BinaryNode<T>(data, left, right);
	}

	/**
	 * Method to get the root node.
	 * 
	 * @return the root
	 */
	public BinaryNode<T> getRoot() {
		return root;
	}

	/**
	 * Method to set the root node.
	 * 
	 * @param root the root to set
	 */
	public void setRoot(BinaryNode<T> root) {
		this.root = root;
	}

}
